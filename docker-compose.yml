version: '3.8'

services:
  config-server:
    image: localstack/localstack:3.2.0
    container_name: config-server
    ports:
      - "4566:4566"
    environment:
      - SERVICES=ssm,config
      - DEBUG=1
      - PERSISTENCE=1
      - DATA_DIR=/tmp/localstack/data
      - LAMBDA_EXECUTOR=docker
    volumes:
      # - "./localstack-data:/tmp/localstack/data"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - nms-network

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "54322:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=notification_management
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/db:/docker-entrypoint-initdb.d/
    networks:
      - nms-network

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    #    environment:
    #      - OLLAMA_MODELS
    #    deploy:
    #      resources:
    #        limits:
    #          memory: 2g
    #          cpus: '0.5'
    networks:
      - nms-network

  keycloak_svc:
    container_name: gocloak
    image: keycloak/keycloak:25.0.6
    command:
      - start-dev
      - --import-realm
    environment:
      KC_HOSTNAME: $KEYCLOAK_SERVER_URL
      KC_HOSTNAME_STRICT: true
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: secret
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: secret
      KC_HEALTH_ENABLED: "true"
      KC_FEATURES: account-api,account3,authorization,client-policies,impersonation,docker,scripts,admin-fine-grained-authz
    ports:
      - "8081:8080"
      - "9000:9000"
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;" ]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - ./keycloak/import/:/opt/keycloak/data/import/

  redis:
    image: "bitnami/redis:6.0.9"
    platform: linux/amd64  # Force x86 architecture for compatibility
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      #- REDIS_PASSWORD=
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - nms_redis_local_db:/bitnami/redis/data
    networks:
      - nms-network

  mailcatcher:
    container_name: mailcatcher
    image: schickling/mailcatcher
    ports:
      - '1080:1080'
      - '1025:1025'
    networks:
      - nms-network
    environment:
      - HTTPPATH=/mails
    healthcheck:
      test: [ "CMD", "wget", "--spider" , "http://mailcatcher:1080" ]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.53.5
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    extra_hosts:
      - "host.docker.internal:host-gateway" # Required for Linux to resolve host.docker.internal
    networks:
      - nms-network

  grafana:
    image: grafana/grafana:12.0.2
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - nms-network
    depends_on:
      - prometheus

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-nms
    image: tuhin47/go-nms:lastest
    command:
      - serve
      #restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - LOG_LEVEL
      - TELEGRAM_TOKEN
      - GEMINI_KEY
      - AWS_ENDPOINT
      - AWS_CONFIG_SERVICE_ENABLED
      - REDIS_HOST
      - DB_HOST
      - DB_PORT
      - KEYCLOAK_SERVER_URL
    volumes:
      - ./app.log:/app.log
    depends_on:
      config-server:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - nms-network
    extra_hosts:
      - "keycloak:host-gateway"

  worker:
    container_name: go-nms-worker
    image: tuhin47/go-nms:lastest
    command:
      - worker
    restart: unless-stopped
    environment:
      - LOG_LEVEL
      - TELEGRAM_TOKEN
      - GEMINI_KEY
      - AWS_ENDPOINT
      - AWS_CONFIG_SERVICE_ENABLED
      - REDIS_HOST
      - DB_HOST
      - DB_PORT
    volumes:
      - ./app.log:/app.log
    networks:
      - nms-network
    depends_on:
      app:
        condition: service_started
      redis:
        condition: service_started
networks:
  nms-network:
    driver: bridge
volumes:
  postgres-data:
    name: nms-local_db
  nms_redis_local_db:
    name: nms_redis-local_db
  grafana-data:
    name: nms-grafana-data
